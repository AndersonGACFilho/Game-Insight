version: "3.9"
services:
  postgres:
    image: postgres:15-alpine
    container_name: gi-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: game_insight
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.98.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"

  gateway:
    build: ./services/gateway
    environment:
      - PORT=8080
      - LOG_LEVEL=info
      - KAFKA_BROKERS=kafka:9092
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - DATABASE_URL=postgres://user:pass@postgres:5432/game_insight?sslmode=disable
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
      - kafka
      - rabbitmq
    ports:
      - "8080:8080"

  user-service:
    build: ./services/user-service
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres:5432/game_insight
      - DB_USER=user
      - DB_PASSWORD=pass
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
    ports:
      - "8081:8080"

  game-service:
    build: ./services/game-service
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres:5432/game_insight
      - DB_USER=user
      - DB_PASSWORD=pass
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
    ports:
      - "8082:8080"

  reco-service:
    build: ./services/reco-service
    environment:
      - PORT=8000
      - DATABASE_URL=postgres://user:pass@postgres:5432/game_insight?sslmode=disable
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
    ports:
      - "8000:8000"

  games-data-etl:
    build: ./services/games-data-etl
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=game_insight
      - DB_SSLMODE=disable
      - DB_TIMEZONE=UTC
      - IGDB_CLIENT_ID=${IGDB_CLIENT_ID:-replace_me}
      - IGDB_SECRET=${IGDB_CLIENT_SECRET:-replace_me}
      - BATCH_LIMIT=${IGDB_BATCH_SIZE:-100}
      - LOG_LEVEL=info
      - LOG_FORMAT=console
      - LOKI_URL=http://loki:3100
      - LOKI_LABELS=service=games-data-etl,env=dev
      - METRICS_PORT=9108
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
      - loki
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9108/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ports:
      - "9108:9108"

  loki:
    image: grafana/loki:2.9.3
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.53.0
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:10.4.5
    depends_on:
      - prometheus
      - loki
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro

volumes:
  pgdata:
  loki-data:
  prometheus-data:
  grafana-data:
